{"remainingRequest":"/usr/local/var/www/nihongo/lineGame/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/local/var/www/nihongo/lineGame/src/components/word-list/word-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/local/var/www/nihongo/lineGame/src/components/word-list/word-list.vue","mtime":1550250468423},{"path":"/usr/local/var/www/nihongo/lineGame/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/var/www/nihongo/lineGame/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/nihongo/lineGame/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport {getCoursesWords} from '../../api/course';\nimport Card from '../card/card';\nimport SimpleProgressBar from '../progress-bar/simple-progress-bar';\n\nexport default {\n  props: {\n    selectCourses: {\n      type: String\n    },\n  },\n  data() {\n    return {\n      cards: [],\n      rightNum:0\n    }\n  },\n  computed: {\n    selectCoursesMap() {\n      return new Map(JSON.parse(this.selectCourses));\n    }\n  },\n  mounted() {\n    let user = JSON.parse(localStorage.getItem('nihongo'));\n    getCoursesWords(this.selectCoursesMap).then((datas) => {\n      datas.forEach((course) => {\n        course.data.forEach((work) => {\n          if (user\n            && user.courseData\n            && user.courseData[work.course_id]\n            && user.courseData[work.course_id].complete\n            && user.courseData[work.course_id].complete.indexOf(work.id) !== -1) {\n            return;\n          }\n          this.cards.push({\n            id: work.id,\n            parentId: work.course_id,\n            imgUrl: work.imgUrl,\n            answer: work.kanji,\n            tips: work.chinese,\n            note: work.kana,\n            enter: \"\",\n            enterState:0\n          });\n        });\n      });\n    });\n  },\n  methods:{\n    right(work){\n      this.rightNum++;\n      this.addRightWork(work.id,work.parentId);\n    },\n    addRightWork(id,parentId){\n      let user = JSON.parse(localStorage.getItem('nihongo'));\n      if(user\n        && !user.courseData){\n        user.courseData = {};\n      }\n      if(!user.courseData[parentId]){\n        user.courseData[parentId] = {\n          state:0,\n          date:new Date(),\n          complete:[]\n        };\n      }\n      if (user\n        && user.courseData\n        && user.courseData[parentId]\n        && user.courseData[parentId].complete\n        && user.courseData[parentId].complete.indexOf(id) === -1) {\n        user.courseData[parentId].complete.push(id);\n        console.log(1);\n      }\n      localStorage.setItem('nihongo',JSON.stringify(user));\n    }\n  },\n  components: {\n    Card,\n    SimpleProgressBar\n  }\n}\n",{"version":3,"sources":["word-list.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"word-list.vue","sourceRoot":"src/components/word-list","sourcesContent":["<template>\n  <div class=\"word-list\">\n    <simple-progress-bar :value=\"rightNum\" :max=\"cards.length\" class=\"simple-progress-bar\"></simple-progress-bar>\n    <card :cards=\"cards\" @right=\"right\" class=\"card\"></card>\n  </div>\n</template>\n\n<script>\n  import {getCoursesWords} from '../../api/course';\n  import Card from '../card/card';\n  import SimpleProgressBar from '../progress-bar/simple-progress-bar';\n\n  export default {\n    props: {\n      selectCourses: {\n        type: String\n      },\n    },\n    data() {\n      return {\n        cards: [],\n        rightNum:0\n      }\n    },\n    computed: {\n      selectCoursesMap() {\n        return new Map(JSON.parse(this.selectCourses));\n      }\n    },\n    mounted() {\n      let user = JSON.parse(localStorage.getItem('nihongo'));\n      getCoursesWords(this.selectCoursesMap).then((datas) => {\n        datas.forEach((course) => {\n          course.data.forEach((work) => {\n            if (user\n              && user.courseData\n              && user.courseData[work.course_id]\n              && user.courseData[work.course_id].complete\n              && user.courseData[work.course_id].complete.indexOf(work.id) !== -1) {\n              return;\n            }\n            this.cards.push({\n              id: work.id,\n              parentId: work.course_id,\n              imgUrl: work.imgUrl,\n              answer: work.kanji,\n              tips: work.chinese,\n              note: work.kana,\n              enter: \"\",\n              enterState:0\n            });\n          });\n        });\n      });\n    },\n    methods:{\n      right(work){\n        this.rightNum++;\n        this.addRightWork(work.id,work.parentId);\n      },\n      addRightWork(id,parentId){\n        let user = JSON.parse(localStorage.getItem('nihongo'));\n        if(user\n          && !user.courseData){\n          user.courseData = {};\n        }\n        if(!user.courseData[parentId]){\n          user.courseData[parentId] = {\n            state:0,\n            date:new Date(),\n            complete:[]\n          };\n        }\n        if (user\n          && user.courseData\n          && user.courseData[parentId]\n          && user.courseData[parentId].complete\n          && user.courseData[parentId].complete.indexOf(id) === -1) {\n          user.courseData[parentId].complete.push(id);\n          console.log(1);\n        }\n        localStorage.setItem('nihongo',JSON.stringify(user));\n      }\n    },\n    components: {\n      Card,\n      SimpleProgressBar\n    }\n  }\n</script>\n\n<style scoped>\n  .word-list {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n  }\n\n  .simple-progress-bar{\n    position: absolute;\n    z-index: 1;\n    width: 100%;\n  }\n\n  .card {\n    flex: 1;\n  }\n\n</style>"]}]}